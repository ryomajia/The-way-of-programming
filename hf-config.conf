input {
file {
    path => [ "/var/log/nginx/access.*" ]
    start_position => "beginning"
}
}



filter {
    ruby {
        init => "@kname = ['http_x_forwarded_for','time_local_test','request','status','body_bytes_sent','request_body','content_length','http_referer','http_user_agent','http_cookie','remote_addr','hostname','upstream_addr','upstream_response_time','request_time']"
        code => "event.append(Hash[@kname.zip(event['message'].split(' | '))])"
    }
    if [http_user_agent] {
        ruby {
            init => "@kname = ['key1','key2']"
            code => "event.append(Hash[@kname.zip(event['http_user_agent'].split(' '))])"
        }
    }
    if [key1]{
        ruby {
            init => "@kname = ['key3','key4']"
            code => "event.append(Hash[@kname.zip(event['key1'].split('/'))])"
        }
    }
    if [key3] == "Mozilla" {
        ruby {
            init => "@kname = ['time_local']"
            code => "event.append(Hash[@kname.zip(event['time_local_test'].split('/'))])"
        }

    if [remote_addr] {
      geoip {
          source => "remote_addr"
          target => "geoip"
          database => "/usr/local/src/logstash-1.5.3/GeoLiteCity.dat"
          add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
          add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
      }
      mutate {
          convert => [ "[geoip][coordinates]", "float"]
      }
    }
    if [request] {
        ruby {
            init => "@kname = ['method','uri','verb']"
            code => "event.append(Hash[@kname.zip(event['request'].split(' '))])"
        }
        if [uri] {
            ruby {
                init => "@kname = ['test1','uri_path_1']"
                code => "event.append(Hash[@kname.zip(event['uri'].split('/'))])"
            }
        }
        if [uri_path_1] == 'log' {
            ruby {
                init => "@kname = ['user_visit_path']"
                code => "event.append(Hash[@kname.zip(event['uri_path_1'].split('/'))])"
            }
            ruby {
                init => "@kname = ['request_timer']"
                code => "event.append(Hash[@kname.zip(event['request_time'].split('/'))])"
            }
            ruby {
                init => "@kname = ['upstream_response_timer']"
                code => "event.append(Hash[@kname.zip(event['upstream_response_time'].split('/'))])"
            }
            ruby {
                init => "@kname = ['time_for_log']"
                code => "event.append(Hash[@kname.zip(event['time_local_test'].split('/'))])"
        }
        }
        if [uri_path_1] == 'r' {
            ruby {
                init => "@kname = ['user_visit_path']"
                code => "event.append(Hash[@kname.zip(event['uri_path_1'].split('/'))])"
            }
            ruby {
                init => "@kname = ['request_timer']"
                code => "event.append(Hash[@kname.zip(event['request_time'].split('/'))])"
            }
            ruby {
                init => "@kname = ['upstream_response_timer']"
                code => "event.append(Hash[@kname.zip(event['upstream_response_time'].split('/'))])"
            }
            ruby {
                init => "@kname = ['time_for_r']"
                code => "event.append(Hash[@kname.zip(event['time_local_test'].split('/'))])"
        }
        }
        if [uri_path_1] == 'compete' {
            ruby {
                init => "@kname = ['user_visit_path']"
                code => "event.append(Hash[@kname.zip(event['uri_path_1'].split('/'))])"
            }
            ruby {
                init => "@kname = ['request_timer']"
                code => "event.append(Hash[@kname.zip(event['request_time'].split('/'))])"
            }
            ruby {
                init => "@kname = ['upstream_response_timer']"
                code => "event.append(Hash[@kname.zip(event['upstream_response_time'].split('/'))])"
            }
            ruby {
                init => "@kname = ['time_for_compete']"
                code => "event.append(Hash[@kname.zip(event['time_local_test'].split('/'))])"
        }
        }
        if [uri_path_1] == 'leaderboard' {
            ruby {
                init => "@kname = ['user_visit_path']"
                code => "event.append(Hash[@kname.zip(event['uri_path_1'].split('/'))])"
            }
            ruby {
                init => "@kname = ['request_timer']"
                code => "event.append(Hash[@kname.zip(event['request_time'].split('/'))])"
            }
            ruby {
                init => "@kname = ['upstream_response_timer']"
                code => "event.append(Hash[@kname.zip(event['upstream_response_time'].split('/'))])"
            }
            ruby {
                init => "@kname = ['time_for_leaderboard']"
                code => "event.append(Hash[@kname.zip(event['time_local_test'].split('/'))])"
        }
        }
        if [uri] == '/' {
            ruby {
                init => "@kname = ['user_visit_path']"
                code => "event.append(Hash[@kname.zip(event['uri'].split('?'))])"
            }
            ruby {
                init => "@kname = ['request_timer']"
                code => "event.append(Hash[@kname.zip(event['request_time'].split('/'))])"
            }
            ruby {
                init => "@kname = ['upstream_response_timer']"
                code => "event.append(Hash[@kname.zip(event['upstream_response_time'].split('/'))])"
            }
            ruby {
                init => "@kname = ['time_for_root_path']"
                code => "event.append(Hash[@kname.zip(event['time_local_test'].split('/'))])"
        }
        }

        if [uri] == "/"{
            ruby {
                init => "@kname = ['url_path','url_args']"
                code => "event.append(Hash[@kname.zip(event['http_referer'].split('?'))])"
            }
            kv {
                prefix => "url_"
                source => "url_args"
                field_split => "& "
                remove_field => [ "url_args","uri","request" ]
            }
        }
    }
    }
    if [http_user_agent] {
        ruby {
            init => "@kname = ['agent_user_type','agent_args1','agent_args2']"
            code => "event.append(Hash[@kname.zip(event['http_user_agent'].split(' '))])"
        }
        if [agent_user_type] == "Mozilla/5.0" {
            ruby {
                init => "@kname = ['agent_args3','agent_type_args','agent_args']"
                code => "event.append(Hash[@kname.zip(event['http_user_agent'].split('('))])"
            }
        }
            if [agent_type_args] {
                ruby {
                    init => "@kname = ['agent_type_args2','test']"
                    code => "event.append(Hash[@kname.zip(event['agent_type_args'].split(')'))])"
                }
            }
            if [agent_type_args2] {
                ruby {
                    init => "@kname = ['agent_type2','test01','agent_type3']"
                    code => "event.append(Hash[@kname.zip(event['agent_type_args2'].split(';'))])"
                }
            }
                if [test01] {
                    ruby {
                        init => "@kname = ['test001','test002','test003']"
                        code => "event.append(Hash[@kname.zip(event['test01'].split(' '))])"
                    }
                }
                if [agent_type2] {
                    if [agent_type2] == "Linux" {
                        if [test001] {
                            if [test001] == "Android" {
                                ruby {
                                    init => "@kname = ['user_agent_type']"
                                    code => "event.append(Hash[@kname.zip(event['test001'].split(' '))])"
                                }
                            }
                            else {
                                ruby {
                                    init => "@kname = ['user_agent_type']"
                                    code => "event.append(Hash[@kname.zip(event['agent_type3'].split(' '))])"
                                }
                            }
                        }
                    }
                    else {
                        ruby {
                            init => "@kname = ['user_agent_type']"
                            code => "event.append(Hash[@kname.zip(event['agent_type2'].split(' '))])"
                        }
                    }
                }
    }
    mutate {
        convert => [
            "body_bytes_sent" , "integer",
            "content_length", "integer",
            "upstream_response_time", "float",
            "request_time", "float",
            "request_timer","float",
            "upstream_response_timer","float"
        ]
    }
#    date {
#        match => [ "time_local", "dd/MMM/yyyy:hh:mm:ss Z" ]
#        locale => "en"
#    }
}



output {
redis { host => "192.168.4.7" data_type => "list" key => "logstash:nginx" }
}
